{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/bidi.js","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js","webpack:///src/app/pages/angular-material/components/mat-drag-drop/mat-drag-drop.module.ts","webpack:///src/app/pages/angular-material/components/mat-drag-drop/mat-drag-drop.page.ts","webpack:///src/app/pages/angular-material/components/mat-drag-drop/mat-drag-drop.page.html"],"names":["DIR_DOCUMENT","providedIn","factory","DIR_DOCUMENT_FACTORY","Directionality","_document","value","change","bodyDir","body","dir","htmlDir","documentElement","complete","ɵfac","Directionality_Factory","t","ctorParameters","type","undefined","decorators","args","ɵprov","token","Dir","_dir","_isInitialized","old","normalizedValue","toLowerCase","_rawDir","emit","Dir_Factory","ɵdir","selectors","hostVars","hostBindings","Dir_HostBindings","rf","ctx","inputs","outputs","exportAs","features","provide","useExisting","propDecorators","selector","providers","host","BidiModule","ɵmod","ɵinj","BidiModule_Factory","ngJitMode","declarations","exports","DragCSSStyleDeclaration","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","multiplier","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","map","part","trim","DragRefConfig","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","DragRefInternal","DragHelperTemplate","DragPreviewTemplate","Point","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","x","y","_activeTransform","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","event","next","length","targetHandle","handle","target","contains","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","_hasStartedDragging","pointerPosition","_getPointerPositionOnPage","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","_dropContainer","isDragging","run","_startDragSequence","_previewRect","width","height","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","registerDragItem","_placeholder","getPlaceholderElement","getRootElement","handles","forEach","_toggleNativeDragInteractions","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","_initialTransform","boundaryElement","unsubscribe","subscribe","_containInsideBoundaryOnResize","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","clear","transform","add","direction","container","position","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","parent","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","appendChild","replaceChild","getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","pointerMove","pointerUp","scroll","pipe","_scrollPosition","getViewportScrollPosition","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","viewRef","viewContainer","createEmbeddedView","context","detectChanges","getRootNode","matchElementSize","deepCloneNode","pointerEvents","margin","top","left","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","bottom","minX","maxX","right","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","newValue","round","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","removeChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","rootNode","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","CachedItemPosition","ScrollPosition","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRefInternal","DropListRef","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_parentPositions","Map","_previousSwap","drag","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","pointerX","pointerY","index","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","parentElement","push","_cacheItemPositions","_reset","items","_withDropContainer","connectedTo","slice","orientation","elements","_scrollableElements","reverse","findIndex","currentItem","size","pointerDelta","isPointerNearClientRect","_clientRect","siblings","isHorizontal","siblingAtNewPosition","clientRect","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","adjustClientRect","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","set","scrollPosition","getMutableClientRect","scrollTop","scrollLeft","elementToMeasure","getVisibleElement","sort","a","b","_stopReceiving","immediateSibling","end","_","floor","_cacheParentPositions","scrolledParent","newTop","newLeft","scrolledParentNode","get","topDifference","leftDifference","_sortFromLastPointerPosition","isInsideClientRect","_canReceive","elementFromPoint","_getShadowRoot","nativeElement","activeSiblings","_updateAfterScroll","isReceiving","shadowRoot","rect","xThreshold","yThreshold","predicate","amount","scrollBy","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","startsWith","moveEvent","upEvent","e","options","config","_clearGlobalListeners","instance","DragDropRegistry_Factory","DEFAULT_CONFIG","DragDrop","DragDrop_Factory","CdkDragStart","CdkDragRelease","CdkDragEnd","CdkDragEnter","CdkDragExit","CdkDragDrop","CdkDragMove","CdkDragSortEvent","CDK_DRAG_PARENT","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CdkDragHandle_Factory","hostAttrs","CdkDragPlaceholder","templateRef","CdkDragPlaceholder_Factory","data","CdkDragPreview","_matchSize","CdkDragPreview_Factory","CDK_DRAG_CONFIG","DragDropConfig","CDK_DRAG_CONFIG_FACTORY","CDK_DROP_LIST","CdkDrag","dropContainer","_viewContainerRef","dragDrop","_changeDetectorRef","_destroyed","observer","subscription","_dragRef","movedEvent","createDrag","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","reset","getFreeDragPosition","onStable","_updateRootElement","changes","childHandleElements","filter","withHandles","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","dispose","rootElementSelector","getClosestMatchingAncestor","Error","nodeName","boundary","ref","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withDirection","markForCheck","draggingDisabled","CdkDrag_Factory","contentQueries","CdkDrag_ContentQueries","dirIndex","_t","first","CdkDrag_HostBindings","descendants","currentElement","matches","msMatchesSelector","CdkDropListGroup","_items","CdkDropListGroup_Factory","_uniqueIdCounter","CdkDropListInternal","ɵ0","CdkDropList","_group","_scrollDispatcher","id","_unsortedItems","createDropList","_setupInputSyncSubscription","_dropLists","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","_syncItemsWithRef","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","list","withOrientation","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","CdkDropList_Factory","CdkDropList_HostBindings","useValue","DragDropModule","DragDropModule_Factory","routes","path","component","MatDragDropPageModule","forChild","imports","MatDragDropPage","todo","done","templateUrl","styleUrls"],"mappings":"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","file":"pages-angular-material-components-mat-drag-drop-mat-drag-drop-module-es5.js","sourcesContent":["import { InjectionToken, inject, EventEmitter, Injectable, Optional, Inject, ɵɵdefineInjectable, ɵɵinject, Directive, Output, Input, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/bidi/dir-document-token.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to inject the document into Directionality.\n * This is used so that the value can be faked in tests.\n *\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\n * tests in Safari to fail.\n *\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\n * themselves use things like `querySelector` in test code.\n *\n * This token is defined in a separate file from Directionality as a workaround for\n * https://github.com/angular/angular/issues/22559\n *\n * \\@docs-private\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nconst DIR_DOCUMENT = new InjectionToken('cdk-dir-doc', {\n    providedIn: 'root',\n    factory: DIR_DOCUMENT_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction DIR_DOCUMENT_FACTORY() {\n    return inject(DOCUMENT);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/bidi/directionality.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\n * Exposes the current direction and a stream of direction changes.\n */\nclass Directionality {\n    /**\n     * @param {?=} _document\n     */\n    constructor(_document) {\n        /**\n         * The current 'ltr' or 'rtl' value.\n         */\n        this.value = 'ltr';\n        /**\n         * Stream that emits whenever the 'ltr' / 'rtl' state changes.\n         */\n        this.change = new EventEmitter();\n        if (_document) {\n            // TODO: handle 'auto' value -\n            // We still need to account for dir=\"auto\".\n            // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\n            // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\n            /** @type {?} */\n            const bodyDir = _document.body ? _document.body.dir : null;\n            /** @type {?} */\n            const htmlDir = _document.documentElement ? _document.documentElement.dir : null;\n            /** @type {?} */\n            const value = bodyDir || htmlDir;\n            this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDirectionality.ɵfac = function Directionality_Factory(t) { return new (t || Directionality)(ɵngcc0.ɵɵinject(DIR_DOCUMENT, 8)); };\n/** @nocollapse */\nDirectionality.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DIR_DOCUMENT,] }] }\n];\n/** @nocollapse */ Directionality.ɵprov = ɵɵdefineInjectable({ factory: function Directionality_Factory() { return new Directionality(ɵɵinject(DIR_DOCUMENT, 8)); }, token: Directionality, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Directionality, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DIR_DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * The current 'ltr' or 'rtl' value.\n     * @type {?}\n     */\n    Directionality.prototype.value;\n    /**\n     * Stream that emits whenever the 'ltr' / 'rtl' state changes.\n     * @type {?}\n     */\n    Directionality.prototype.change;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/bidi/dir.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive to listen for changes of direction of part of the DOM.\n *\n * Provides itself as Directionality such that descendant directives only need to ever inject\n * Directionality to get the closest direction.\n */\nclass Dir {\n    constructor() {\n        /**\n         * Normalized direction that accounts for invalid/unsupported values.\n         */\n        this._dir = 'ltr';\n        /**\n         * Whether the `value` has been set to its initial value.\n         */\n        this._isInitialized = false;\n        /**\n         * Event emitted when the direction changes.\n         */\n        this.change = new EventEmitter();\n    }\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    get dir() { return this._dir; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set dir(value) {\n        /** @type {?} */\n        const old = this._dir;\n        /** @type {?} */\n        const normalizedValue = value ? value.toLowerCase() : value;\n        this._rawDir = value;\n        this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';\n        if (old !== this._dir && this._isInitialized) {\n            this.change.emit(this._dir);\n        }\n    }\n    /**\n     * Current layout direction of the element.\n     * @return {?}\n     */\n    get value() { return this.dir; }\n    /**\n     * Initialize once default value has been set.\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._isInitialized = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.change.complete();\n    }\n}\nDir.ɵfac = function Dir_Factory(t) { return new (t || Dir)(); };\nDir.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Dir, selectors: [[\"\", \"dir\", \"\"]], hostVars: 1, hostBindings: function Dir_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"dir\", ctx._rawDir);\n    } }, inputs: { dir: \"dir\" }, outputs: { change: \"dirChange\" }, exportAs: [\"dir\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: Directionality, useExisting: Dir }])] });\nDir.propDecorators = {\n    change: [{ type: Output, args: ['dirChange',] }],\n    dir: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Dir, [{\n        type: Directive,\n        args: [{\n                selector: '[dir]',\n                providers: [{ provide: Directionality, useExisting: Dir }],\n                host: { '[attr.dir]': '_rawDir' },\n                exportAs: 'dir'\n            }]\n    }], function () { return []; }, { change: [{\n            type: Output,\n            args: ['dirChange']\n        }], dir: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Normalized direction that accounts for invalid/unsupported values.\n     * @type {?}\n     * @private\n     */\n    Dir.prototype._dir;\n    /**\n     * Whether the `value` has been set to its initial value.\n     * @type {?}\n     * @private\n     */\n    Dir.prototype._isInitialized;\n    /**\n     * Direction as passed in by the consumer.\n     * @type {?}\n     */\n    Dir.prototype._rawDir;\n    /**\n     * Event emitted when the direction changes.\n     * @type {?}\n     */\n    Dir.prototype.change;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/bidi/bidi-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass BidiModule {\n}\nBidiModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BidiModule });\nBidiModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BidiModule_Factory(t) { return new (t || BidiModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BidiModule, { declarations: [Dir], exports: [Dir] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BidiModule, [{\n        type: NgModule,\n        args: [{\n                exports: [Dir],\n                declarations: [Dir]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/bidi/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BidiModule, DIR_DOCUMENT, Dir, Directionality, DIR_DOCUMENT_FACTORY as ɵangular_material_src_cdk_bidi_bidi_a };\n\n//# sourceMappingURL=bidi.js.map","import { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Directive, ElementRef, Optional, Input, TemplateRef, EventEmitter, isDevMode, SkipSelf, ViewContainerRef, ChangeDetectorRef, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { startWith, takeUntil, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-styling.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction DragCSSStyleDeclaration() { }\nif (false) {\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.webkitUserDrag;\n    /** @type {?} */\n    DragCSSStyleDeclaration.prototype.MozUserSelect;\n}\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = (/** @type {?} */ (source[key]));\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/transition-duration.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    const computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    const property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => prop === 'transform' || prop === 'all'));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    const propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Object that can be used to configure the behavior of DragRef.\n * @record\n */\nfunction DragRefConfig() { }\nif (false) {\n    /**\n     * Minimum amount of pixels that the user should\n     * drag, before the CDK initiates a drag sequence.\n     * @type {?}\n     */\n    DragRefConfig.prototype.dragStartThreshold;\n    /**\n     * Amount the pixels the user should drag before the CDK\n     * considers them to have changed the drag direction.\n     * @type {?}\n     */\n    DragRefConfig.prototype.pointerDirectionChangeThreshold;\n}\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * \\@docs-private\n * @record\n */\nfunction DragRefInternal() { }\n/**\n * Template that can be used to create a drag helper element (e.g. a preview or a placeholder).\n * @record\n * @template T\n */\nfunction DragHelperTemplate() { }\nif (false) {\n    /** @type {?} */\n    DragHelperTemplate.prototype.template;\n    /** @type {?} */\n    DragHelperTemplate.prototype.viewContainer;\n    /** @type {?} */\n    DragHelperTemplate.prototype.context;\n}\n/**\n * Template that can be used to create a drag preview element.\n * @record\n * @template T\n */\nfunction DragPreviewTemplate() { }\nif (false) {\n    /** @type {?|undefined} */\n    DragPreviewTemplate.prototype.matchSize;\n}\n/**\n * Point on the page or within an element.\n * @record\n */\nfunction Point() { }\nif (false) {\n    /** @type {?} */\n    Point.prototype.x;\n    /** @type {?} */\n    Point.prototype.y;\n}\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @template T\n */\nclass DragRef {\n    /**\n     * @param {?} element\n     * @param {?} _config\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being scrolled.\n         */\n        this._scrollSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being resized.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                /** @type {?} */\n                const targetHandle = this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => {\n                    /** @type {?} */\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            if (!this._hasStartedDragging) {\n                /** @type {?} */\n                const pointerPosition = this._getPointerPositionOnPage(event);\n                /** @type {?} */\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                /** @type {?} */\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                /** @type {?} */\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    /** @type {?} */\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._startDragSequence(event)));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n            this._hasMoved = true;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this._endDragSequence(event);\n        });\n        this.withRootElement(element);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     * @return {?}\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    withHandles(handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => coerceElement(handle)));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => toggleNativeDragInteractions(handle, false)));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    withPreviewTemplate(template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    withPlaceholderTemplate(template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    withRootElement(rootElement) {\n        /** @type {?} */\n        const element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n            element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    withBoundaryElement(boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        (/** @type {?} */ (this))._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            (/** @type {?} */ (this))._resizeSubscription = (/** @type {?} */ (this))._viewportRuler\n                .change(10)\n                .subscribe((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (this))._containInsideBoundaryOnResize()));\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = (/** @type {?} */ (null));\n    }\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        /** @type {?} */\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    setFreeDragPosition(value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the item's sort order based on the last-known pointer position.\n     * @return {?}\n     */\n    _sortFromLastPointerPosition() {\n        /** @type {?} */\n        const position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(position);\n        }\n    }\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @private\n     * @param {?} event Browser event object that ended the sequence.\n     * @return {?}\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            () => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }));\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            }));\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _startDragSequence(event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        if (this._dropContainer) {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const parent = (/** @type {?} */ (element.parentNode));\n            /** @type {?} */\n            const preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            /** @type {?} */\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this._dropContainer.start();\n            this._initialContainer = this._dropContainer;\n            this._initialIndex = this._dropContainer.getItemIndex(this);\n        }\n        else {\n            this._initialContainer = this._initialIndex = (/** @type {?} */ (undefined));\n        }\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        const isDragging = this.isDragging();\n        /** @type {?} */\n        const isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        const isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        const rootElement = this._rootElement;\n        /** @type {?} */\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        }));\n        if (this._boundaryElement) {\n            this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        /** @type {?} */\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        (/** @type {?} */ (this._anchor.parentNode)).replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = (/** @type {?} */ (this._dropContainer));\n            /** @type {?} */\n            const currentIndex = container.getItemIndex(this);\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            /** @type {?} */\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            /** @type {?} */\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance, this._initialIndex);\n            this._dropContainer = this._initialContainer;\n        }));\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    _updateActiveDropContainer({ x, y }) {\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: (/** @type {?} */ (this._dropContainer)) });\n                (/** @type {?} */ (this._dropContainer)).exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = (/** @type {?} */ (newContainer));\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: (/** @type {?} */ (newContainer)),\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(this)\n                });\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._startScrollingIfNecessary(x, y);\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    _createPreviewElement() {\n        /** @type {?} */\n        const previewConfig = this._previewTemplate;\n        /** @type {?} */\n        const previewClass = this.previewClass;\n        /** @type {?} */\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        let preview;\n        if (previewTemplate) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (previewConfig)).viewContainer.createEmbeddedView(previewTemplate, (/** @type {?} */ (previewConfig)).context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if ((/** @type {?} */ (previewConfig)).matchSize) {\n                matchElementSize(preview, this._rootElement);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            /** @type {?} */\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element);\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: '1000'\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach((/**\n                 * @param {?} className\n                 * @return {?}\n                 */\n                className => preview.classList.add(className)));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            resolve => {\n                /** @type {?} */\n                const handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                const timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    }\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    _createPlaceholderElement() {\n        /** @type {?} */\n        const placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n        /** @type {?} */\n        const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getPointerPositionOnPage(event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        return {\n            x: point.pageX - this._scrollPosition.left,\n            y: point.pageY - this._scrollPosition.top\n        };\n    }\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getConstrainedPointerPosition(event) {\n        /** @type {?} */\n        const point = this._getPointerPositionOnPage(event);\n        /** @type {?} */\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        /** @type {?} */\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            /** @type {?} */\n            const boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            const previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            const minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            const minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    }\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        /** @type {?} */\n        const delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    _applyRootElementTransform(x, y) {\n        /** @type {?} */\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    _getDragDistance(currentPosition) {\n        /** @type {?} */\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /**\n     * Cleans up any cached element dimensions that we don't need after dragging has stopped.\n     * @private\n     * @return {?}\n     */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     * @private\n     * @return {?}\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        /** @type {?} */\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        /** @type {?} */\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        /** @type {?} */\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        /** @type {?} */\n        const topOverflow = boundaryRect.top - elementRect.top;\n        /** @type {?} */\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /**\n     * Gets the drag start delay, based on the event type.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getDragStartDelay(event) {\n        /** @type {?} */\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n}\nif (false) {\n    /**\n     * Element displayed next to the user's pointer while the element is dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._preview;\n    /**\n     * Reference to the view of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRef;\n    /**\n     * Reference to the view of the placeholder element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderRef;\n    /**\n     * Element that is rendered instead of the draggable item while it is being sorted.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholder;\n    /**\n     * Coordinates within the element at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionInElement;\n    /**\n     * Coordinates on the page at which the user picked up the element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._passiveTransform;\n    /**\n     * CSS `transform` that is applied to the element while it's being dragged.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._activeTransform;\n    /**\n     * Inline `transform` value that the element had before the first dragging sequence.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasStartedDragging;\n    /**\n     * Whether the element has moved since the user started dragging it.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._hasMoved;\n    /**\n     * Drop container in which the DragRef resided when dragging began.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialContainer;\n    /**\n     * Index at which the item started in its initial container.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._initialIndex;\n    /**\n     * Cached scroll position on the page when the element was picked up.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollPosition;\n    /**\n     * Emits when the item is being moved.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._moveEvents;\n    /**\n     * Keeps track of the direction in which the user is dragging along each axis.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDirectionDelta;\n    /**\n     * Pointer position at which the last change in the delta occurred.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerPositionAtLastDirectionChange;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._rootElementTapHighlight;\n    /**\n     * Subscription to pointer movement events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMoveSubscription;\n    /**\n     * Subscription to the event that is dispatched when the user lifts their pointer.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUpSubscription;\n    /**\n     * Subscription to the viewport being scrolled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._scrollSubscription;\n    /**\n     * Subscription to the viewport being resized.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._resizeSubscription;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._lastTouchEventTime;\n    /**\n     * Time at which the last dragging sequence was started.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragStartTime;\n    /**\n     * Cached reference to the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryElement;\n    /**\n     * Whether the native dragging interactions have been enabled on the root element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._nativeInteractionsEnabled;\n    /**\n     * Cached dimensions of the preview element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewRect;\n    /**\n     * Cached dimensions of the boundary element.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._boundaryRect;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._placeholderTemplate;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._handles;\n    /**\n     * Registered handles that are currently disabled.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabledHandles;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dropContainer;\n    /**\n     * Layout direction of the item.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._direction;\n    /**\n     * Axis along which dragging is locked.\n     * @type {?}\n     */\n    DragRef.prototype.lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    DragRef.prototype.dragStartDelay;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    DragRef.prototype.previewClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._disabled;\n    /**\n     * Emits as the drag sequence is being prepared.\n     * @type {?}\n     */\n    DragRef.prototype.beforeStarted;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    DragRef.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    DragRef.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    DragRef.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    DragRef.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    DragRef.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    DragRef.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    DragRef.prototype.moved;\n    /**\n     * Arbitrary data that can be attached to the drag item.\n     * @type {?}\n     */\n    DragRef.prototype.data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    DragRef.prototype.constrainPosition;\n    /**\n     * Handler for the `mousedown`/`touchstart` events.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerDown;\n    /**\n     * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerMove;\n    /**\n     * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._pointerUp;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._config;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragRef.prototype._dragDropRegistry;\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    const clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    /** @type {?} */\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        /** @type {?} */\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            /** @type {?} */\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param {?} node Node to be removed.\n * @return {?}\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n * @param {?} viewRef\n * @param {?} _document\n * @return {?}\n */\nfunction getRootNode(viewRef, _document) {\n    /** @type {?} */\n    const rootNode = viewRef.rootNodes[0];\n    if (rootNode.nodeType !== _document.ELEMENT_NODE) {\n        /** @type {?} */\n        const wrapper = _document.createElement('div');\n        wrapper.appendChild(rootNode);\n        return wrapper;\n    }\n    return (/** @type {?} */ (rootNode));\n}\n/**\n * Matches the target element's size to the source's size.\n * @param {?} target Element that needs to be resized.\n * @param {?} source Element whose size needs to be matched.\n * @return {?}\n */\nfunction matchElementSize(target, source) {\n    /** @type {?} */\n    const sourceRect = source.getBoundingClientRect();\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-utils.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    const from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    const target = array[from];\n    /** @type {?} */\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drop-list-ref.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Entry in the position cache for draggable items.\n * \\@docs-private\n * @record\n */\nfunction CachedItemPosition() { }\nif (false) {\n    /**\n     * Instance of the drag item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.drag;\n    /**\n     * Dimensions of the item.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.clientRect;\n    /**\n     * Amount by which the item has been moved since dragging started.\n     * @type {?}\n     */\n    CachedItemPosition.prototype.offset;\n}\n/**\n * Object holding the scroll position of something.\n * @record\n */\nfunction ScrollPosition() { }\nif (false) {\n    /** @type {?} */\n    ScrollPosition.prototype.top;\n    /** @type {?} */\n    ScrollPosition.prototype.left;\n}\n/** @enum {number} */\nconst AutoScrollVerticalDirection = {\n    NONE: 0, UP: 1, DOWN: 2,\n};\n/** @enum {number} */\nconst AutoScrollHorizontalDirection = {\n    NONE: 0, LEFT: 1, RIGHT: 2,\n};\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * \\@docs-private\n * @record\n */\nfunction DropListRefInternal() { }\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @template T\n */\nclass DropListRef {\n    /**\n     * @param {?} element\n     * @param {?} _dragDropRegistry\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     */\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Cached positions of the scrollable parent elements.\n         */\n        this._parentPositions = new Map();\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        /**\n         * Subscription to the window being scrolled.\n         */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /**\n         * Vertical direction in which the list is currently scrolling.\n         */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /**\n         * Horizontal direction in which the list is currently scrolling.\n         */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /**\n         * Used to signal to the current auto-scroll sequence when to stop.\n         */\n        this._stopScrollTimers = new Subject();\n        /**\n         * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n         */\n        this._cachedShadowRoot = null;\n        /**\n         * Starts the interval that'll auto-scroll the element.\n         */\n        this._startScrollInterval = (/**\n         * @return {?}\n         */\n        () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            }));\n        });\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n    }\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = (/** @type {?} */ (null));\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._isDragging;\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        /** @type {?} */\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || ((/** @type {?} */ (styles))).scrollSnapType || '';\n        ((/** @type {?} */ (styles))).scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._startReceiving(this)));\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?=} index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        /** @type {?} */\n        const activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        const currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        const placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            const element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed.\n        this._cacheItemPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * \\@breaking-change 11.0.0 `previousIndex` parameter to become required.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?} distance Distance the user has dragged since the start of the dragging sequence.\n     * @param {?=} previousIndex Index of the item when dragging started.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    withItems(items) {\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._withDropContainer((/** @type {?} */ (this)))));\n        if ((/** @type {?} */ (this)).isDragging()) {\n            (/** @type {?} */ (this))._cacheItems();\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    connectedTo(connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    withOrientation(orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} elements Elements that can be scrolled.\n     * @return {THIS}\n     */\n    withScrollableParents(elements) {\n        /** @type {?} */\n        const element = coerceElement((/** @type {?} */ (this)).element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        (/** @type {?} */ (this))._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !isPointerNearClientRect(this._clientRect, pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        const siblings = this._itemPositions;\n        /** @type {?} */\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n        /** @type {?} */\n        const siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        const delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        (sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            const isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param {?} pointerX User's pointer position along the x axis.\n     * @param {?} pointerY User's pointer position along the y axis.\n     * @return {?}\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        /** @type {?} */\n        let scrollNode;\n        /** @type {?} */\n        let verticalScrollDirection = 0 /* NONE */;\n        /** @type {?} */\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.forEach((/**\n         * @param {?} position\n         * @param {?} element\n         * @return {?}\n         */\n        (position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections((/** @type {?} */ (element)), position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = (/** @type {?} */ (element));\n                }\n            }\n        }));\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /**\n     * Stops any currently-running auto-scroll sequences.\n     * @return {?}\n     */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /**\n     * Caches the positions of the configured scrollable parents.\n     * @private\n     * @return {?}\n     */\n    _cacheParentPositions() {\n        this._parentPositions.clear();\n        this._parentPositions.set(this._document, {\n            scrollPosition: (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition(),\n        });\n        this._scrollableElements.forEach((/**\n         * @param {?} element\n         * @return {?}\n         */\n        element => {\n            /** @type {?} */\n            const clientRect = getMutableClientRect(element);\n            // We keep the ClientRect cached in two properties, because it's referenced in a lot of\n            // performance-sensitive places and we want to avoid the extra lookups. The `element` is\n            // guaranteed to always be in the `_scrollableElements` so this should always match.\n            if (element === this.element) {\n                this._clientRect = clientRect;\n            }\n            this._parentPositions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect\n            });\n        }));\n    }\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    _cacheItemPositions() {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        drag => {\n            /** @type {?} */\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    }\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    _reset() {\n        this._isDragging = false;\n        /** @type {?} */\n        const styles = coerceElement(this.element).style;\n        ((/** @type {?} */ (styles))).scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item.getRootElement().style.transform = ''));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._stopReceiving(this)));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            const start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n        }));\n    }\n    /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Updates the internal state of the container after a scroll event has happened.\n     * @private\n     * @param {?} scrolledParent Element that was scrolled.\n     * @param {?} newTop New top scroll position.\n     * @param {?} newLeft New left scroll position.\n     * @return {?}\n     */\n    _updateAfterScroll(scrolledParent, newTop, newLeft) {\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support `contains`\n        // on the `document`.\n        /** @type {?} */\n        const scrolledParentNode = scrolledParent === this._document ? scrolledParent.documentElement : scrolledParent;\n        /** @type {?} */\n        const scrollPosition = (/** @type {?} */ (this._parentPositions.get(scrolledParent))).scrollPosition;\n        /** @type {?} */\n        const topDifference = scrollPosition.top - newTop;\n        /** @type {?} */\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this._parentPositions.forEach((/**\n         * @param {?} position\n         * @param {?} node\n         * @return {?}\n         */\n        (position, node) => {\n            if (position.clientRect && scrolledParent !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        }));\n        // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n        // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n        // behavior where we might be measuring the element before its position has changed.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        }));\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        }));\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._canReceive(item, x, y)));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        /** @type {?} */\n        const elementFromPoint = (/** @type {?} */ (this._getShadowRoot().elementFromPoint(x, y)));\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    _startReceiving(sibling) {\n        /** @type {?} */\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     * @private\n     * @return {?}\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            if (this.isDragging()) {\n                /** @type {?} */\n                const target = (/** @type {?} */ (event.target));\n                /** @type {?} */\n                const position = this._parentPositions.get(target);\n                if (position) {\n                    /** @type {?} */\n                    let newTop;\n                    /** @type {?} */\n                    let newLeft;\n                    if (target === this._document) {\n                        /** @type {?} */\n                        const scrollPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n                        newTop = scrollPosition.top;\n                        newLeft = scrollPosition.left;\n                    }\n                    else {\n                        newTop = ((/** @type {?} */ (target))).scrollTop;\n                        newLeft = ((/** @type {?} */ (target))).scrollLeft;\n                    }\n                    this._updateAfterScroll(target, newTop, newLeft);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        }));\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     * @private\n     * @return {?}\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            /** @type {?} */\n            const shadowRoot = (/** @type {?} */ (_getShadowRoot(coerceElement(this.element))));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\nif (false) {\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    DropListRef.prototype.element;\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.disabled;\n    /**\n     * Whether sorting items within the list is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.sortingDisabled;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    DropListRef.prototype.lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     * @type {?}\n     */\n    DropListRef.prototype.autoScrollDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    DropListRef.prototype.enterPredicate;\n    /**\n     * Emits right before dragging has started.\n     * @type {?}\n     */\n    DropListRef.prototype.beforeStarted;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    DropListRef.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    DropListRef.prototype.exited;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    DropListRef.prototype.dropped;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    DropListRef.prototype.sorted;\n    /**\n     * Arbitrary data that can be attached to the drop list.\n     * @type {?}\n     */\n    DropListRef.prototype.data;\n    /**\n     * Whether an item in the list is being dragged.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._isDragging;\n    /**\n     * Cache of the dimensions of all the items inside the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._itemPositions;\n    /**\n     * Cached positions of the scrollable parent elements.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._parentPositions;\n    /**\n     * Cached `ClientRect` of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._clientRect;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * from `_draggables`, as well as any items that have been dragged in, but haven't\n     * been dropped yet.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeDraggables;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as\n     * well as what direction the pointer was moving in when the swap occured.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._previousSwap;\n    /**\n     * Draggable items in the container.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._draggables;\n    /**\n     * Drop lists that are connected to the current one.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._siblings;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._orientation;\n    /**\n     * Connected siblings that currently have a dragged item.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._activeSiblings;\n    /**\n     * Layout direction of the drop list.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._direction;\n    /**\n     * Subscription to the window being scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportScrollSubscription;\n    /**\n     * Vertical direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._verticalScrollDirection;\n    /**\n     * Horizontal direction in which the list is currently scrolling.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._horizontalScrollDirection;\n    /**\n     * Node that is being auto-scrolled.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollNode;\n    /**\n     * Used to signal to the current auto-scroll sequence when to stop.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._stopScrollTimers;\n    /**\n     * Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._cachedShadowRoot;\n    /**\n     * Reference to the document.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._document;\n    /**\n     * Elements that can be scrolled while the user is dragging.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._scrollableElements;\n    /**\n     * Initial value for the element's `scroll-snap-type` style.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._initialScrollSnap;\n    /**\n     * Starts the interval that'll auto-scroll the element.\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._startScrollInterval;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._dragDropRegistry;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DropListRef.prototype._viewportRuler;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param {?} rect ClientRect to check against.\n * @param {?} pointerX Coordinates along the X axis.\n * @param {?} pointerY Coordinates along the Y axis.\n * @return {?}\n */\nfunction isPointerNearClientRect(rect, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    /** @type {?} */\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    /** @type {?} */\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Gets a mutable version of an element's bounding `ClientRect`.\n * @param {?} element\n * @return {?}\n */\nfunction getMutableClientRect(element) {\n    /** @type {?} */\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    /** @type {?} */\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @return {?}\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    /** @type {?} */\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param {?} element Element for which we should calculate the scroll direction.\n * @param {?} clientRect Bounding client rectangle of the element.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    /** @type {?} */\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    /** @type {?} */\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    /** @type {?} */\n    let verticalScrollDirection = 0 /* NONE */;\n    /** @type {?} */\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        /** @type {?} */\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        /** @type {?} */\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-registry.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    }\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            const isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerMove.next((/** @type {?} */ (e)))),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerUp.next((/** @type {?} */ (e)))),\n                options: true\n            })\n                .set('scroll', {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.scroll.next(e)),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    }\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDragItem(instance)));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDropContainer(instance)));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        (config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\n/** @nocollapse */\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ DragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._document;\n    /**\n     * Registered drop container instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dropInstances;\n    /**\n     * Registered drag item instances.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._dragInstances;\n    /**\n     * Drag item instances that are currently being dragged.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._activeDragInstances;\n    /**\n     * Keeps track of the event listeners that we've bound to the `document`.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._globalListeners;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerMove;\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.pointerUp;\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @type {?}\n     */\n    DragDropRegistry.prototype.scroll;\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * \\@param event Event whose default action should be prevented.\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._preventDefaultWhileDragging;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDropRegistry.prototype._ngZone;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\n/** @nocollapse */\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/** @nocollapse */ DragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\nif (false) {\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._viewportRuler;\n    /**\n     * @type {?}\n     * @private\n     */\n    DragDrop.prototype._dragDropRegistry;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-events.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Event emitted when the user starts dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragStart() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragStart.prototype.source;\n}\n/**\n * Event emitted when the user releases an item, before any animations have started.\n * @record\n * @template T\n */\nfunction CdkDragRelease() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragRelease.prototype.source;\n}\n/**\n * Event emitted when the user stops dragging a draggable.\n * @record\n * @template T\n */\nfunction CdkDragEnd() { }\nif (false) {\n    /**\n     * Draggable that emitted the event.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.source;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragEnd.prototype.distance;\n}\n/**\n * Event emitted when the user moves an item into a new drop container.\n * @record\n * @template T, I\n */\nfunction CdkDragEnter() { }\nif (false) {\n    /**\n     * Container into which the user has moved the item.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.container;\n    /**\n     * Item that was moved into the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.item;\n    /**\n     * Index at which the item has entered the container.\n     * @type {?}\n     */\n    CdkDragEnter.prototype.currentIndex;\n}\n/**\n * Event emitted when the user removes an item from a\n * drop container by moving it into another one.\n * @record\n * @template T, I\n */\nfunction CdkDragExit() { }\nif (false) {\n    /**\n     * Container from which the user has a removed an item.\n     * @type {?}\n     */\n    CdkDragExit.prototype.container;\n    /**\n     * Item that was removed from the container.\n     * @type {?}\n     */\n    CdkDragExit.prototype.item;\n}\n/**\n * Event emitted when the user drops a draggable item inside a drop container.\n * @record\n * @template T, O\n */\nfunction CdkDragDrop() { }\nif (false) {\n    /**\n     * Index of the item when it was picked up.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousIndex;\n    /**\n     * Current index of the item.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.currentIndex;\n    /**\n     * Item that is being dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.item;\n    /**\n     * Container in which the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.container;\n    /**\n     * Container from which the item was picked up. Can be the same as the `container`.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.previousContainer;\n    /**\n     * Whether the user's pointer was over the container when the item was dropped.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.isPointerOverContainer;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragDrop.prototype.distance;\n}\n/**\n * Event emitted as the user is dragging a draggable item.\n * @record\n * @template T\n */\nfunction CdkDragMove() { }\nif (false) {\n    /**\n     * Item that is being dragged.\n     * @type {?}\n     */\n    CdkDragMove.prototype.source;\n    /**\n     * Position of the user's pointer on the page.\n     * @type {?}\n     */\n    CdkDragMove.prototype.pointerPosition;\n    /**\n     * Native event that is causing the dragging.\n     * @type {?}\n     */\n    CdkDragMove.prototype.event;\n    /**\n     * Distance in pixels that the user has dragged since the drag sequence started.\n     * @type {?}\n     */\n    CdkDragMove.prototype.distance;\n    /**\n     * Indicates the direction in which the user is dragging the element along each axis.\n     * `1` means that the position is increasing (e.g. the user is moving to the right or downwards),\n     * whereas `-1` means that it's decreasing (they're moving to the left or upwards). `0` means\n     * that the position hasn't changed.\n     * @type {?}\n     */\n    CdkDragMove.prototype.delta;\n}\n/**\n * Event emitted when the user swaps the position of two drag items.\n * @record\n * @template T, I\n */\nfunction CdkDragSortEvent() { }\nif (false) {\n    /**\n     * Index from which the item was sorted previously.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.previousIndex;\n    /**\n     * Index that the item is currently in.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.currentIndex;\n    /**\n     * Container that the item belongs to.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.container;\n    /**\n     * Item that is being sorted.\n     * @type {?}\n     */\n    CdkDragSortEvent.prototype.item;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-parent.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-handle.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nclass CdkDragHandle {\n    /**\n     * @param {?} element\n     * @param {?=} parentDrag\n     */\n    constructor(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /**\n     * Whether starting to drag through this handle is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 8)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] } });\n/** @nocollapse */\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDragHandle.ngAcceptInputType_disabled;\n    /**\n     * Closest parent draggable instance.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._parentDrag;\n    /**\n     * Emits when the state of the handle has changed.\n     * @type {?}\n     */\n    CdkDragHandle.prototype._stateChanges;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragHandle.prototype._disabled;\n    /** @type {?} */\n    CdkDragHandle.prototype.element;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-placeholder.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nclass CdkDragPlaceholder {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" } });\n/** @nocollapse */\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /**\n     * Context data to be added to the placeholder template instance.\n     * @type {?}\n     */\n    CdkDragPlaceholder.prototype.data;\n    /** @type {?} */\n    CdkDragPlaceholder.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag-preview.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nclass CdkDragPreview {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /**\n     * Whether the preview should preserve the same size as the item that is being dragged.\n     * @return {?}\n     */\n    get matchSize() { return this._matchSize; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" } });\n/** @nocollapse */\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDragPreview.ngAcceptInputType_matchSize;\n    /**\n     * Context data to be added to the preview template instance.\n     * @type {?}\n     */\n    CdkDragPreview.prototype.data;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDragPreview.prototype._matchSize;\n    /** @type {?} */\n    CdkDragPreview.prototype.templateRef;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/config.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n * @type {?}\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n/**\n * Object that can be used to configure the drag\n * items and drop lists within a module or a component.\n * @record\n */\nfunction DragDropConfig() { }\nif (false) {\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.lockAxis;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.dragStartDelay;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.constrainPosition;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.previewClass;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.boundaryElement;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.rootElementSelector;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.draggingDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.sortingDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.listAutoScrollDisabled;\n    /** @type {?|undefined} */\n    DragDropConfig.prototype.listOrientation;\n}\n/**\n * @deprecated No longer being used. To be removed.\n * \\@breaking-change 10.0.0\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drag.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nclass CdkDrag {\n    /**\n     * @param {?} element\n     * @param {?} dropContainer\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} config\n     * @param {?} _dir\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     */\n    constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            })))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5\n        });\n        this._dragRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                /** @type {?} */\n                const childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle._parentDrag === this))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle.element));\n                this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                return (/** @type {?} */ (merge(...handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                item => {\n                    return item._stateChanges.pipe(startWith(item));\n                })))));\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                const dragRef = this._dragRef;\n                /** @type {?} */\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    _updateRootElement() {\n        /** @type {?} */\n        const element = this.element.nativeElement;\n        /** @type {?} */\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    _getBoundaryElement() {\n        /** @type {?} */\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        /** @type {?} */\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                const dir = this._dir;\n                /** @type {?} */\n                const dragStartDelay = this.dragStartDelay;\n                /** @type {?} */\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    }\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.released.emit({ source: this });\n        }));\n        ref.ended.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        }));\n    }\n    /**\n     * Assigns the default input values based on a provided config object.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPreview, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPlaceholder, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragHandle, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CdkDragHandle, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPreview]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPlaceholder]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDrag.ngAcceptInputType_disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._destroyed;\n    /**\n     * Reference to the underlying drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype._dragRef;\n    /**\n     * Elements that can be used to drag the draggable item.\n     * @type {?}\n     */\n    CdkDrag.prototype._handles;\n    /**\n     * Element that will be used as a template to create the draggable item's preview.\n     * @type {?}\n     */\n    CdkDrag.prototype._previewTemplate;\n    /**\n     * Template for placeholder element rendered to show where a draggable would be dropped.\n     * @type {?}\n     */\n    CdkDrag.prototype._placeholderTemplate;\n    /**\n     * Arbitrary data to attach to this drag instance.\n     * @type {?}\n     */\n    CdkDrag.prototype.data;\n    /**\n     * Locks the position of the dragged element along the specified axis.\n     * @type {?}\n     */\n    CdkDrag.prototype.lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     * @type {?}\n     */\n    CdkDrag.prototype.rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     * @type {?}\n     */\n    CdkDrag.prototype.boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     * @type {?}\n     */\n    CdkDrag.prototype.dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     * @type {?}\n     */\n    CdkDrag.prototype.freeDragPosition;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page and should return a point describing where the item should\n     * be rendered.\n     * @type {?}\n     */\n    CdkDrag.prototype.constrainPosition;\n    /**\n     * Class to be added to the preview element.\n     * @type {?}\n     */\n    CdkDrag.prototype.previewClass;\n    /**\n     * Emits when the user starts dragging the item.\n     * @type {?}\n     */\n    CdkDrag.prototype.started;\n    /**\n     * Emits when the user has released a drag item, before any animations have started.\n     * @type {?}\n     */\n    CdkDrag.prototype.released;\n    /**\n     * Emits when the user stops dragging an item in the container.\n     * @type {?}\n     */\n    CdkDrag.prototype.ended;\n    /**\n     * Emits when the user has moved the item into a new container.\n     * @type {?}\n     */\n    CdkDrag.prototype.entered;\n    /**\n     * Emits when the user removes the item its container by dragging it into another container.\n     * @type {?}\n     */\n    CdkDrag.prototype.exited;\n    /**\n     * Emits when the user drops the item inside a container.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropped;\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     * @type {?}\n     */\n    CdkDrag.prototype.moved;\n    /**\n     * Element that the draggable is attached to.\n     * @type {?}\n     */\n    CdkDrag.prototype.element;\n    /**\n     * Droppable container that the draggable is a part of.\n     * @type {?}\n     */\n    CdkDrag.prototype.dropContainer;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._document;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDrag.prototype._changeDetectorRef;\n}\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    let currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list-group.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nclass CdkDropListGroup {\n    constructor() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /**\n     * Whether starting a dragging sequence from inside this group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup'\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    CdkDropListGroup.ngAcceptInputType_disabled;\n    /**\n     * Drop lists registered inside the group.\n     * @type {?}\n     */\n    CdkDropListGroup.prototype._items;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropListGroup.prototype._disabled;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/directives/drop-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nlet _uniqueIdCounter = 0;\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * \\@docs-private\n * @record\n */\nfunction CdkDropListInternal() { }\nconst ɵ0 = undefined;\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nclass CdkDropList {\n    /**\n     * @param {?} element\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     * @param {?=} _dir\n     * @param {?=} _group\n     * @param {?=} _scrollDispatcher\n     * @param {?=} config\n     */\n    constructor(element, dragDrop, _changeDetectorRef, _dir, _group, _scrollDispatcher, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        this._scrollDispatcher = _scrollDispatcher;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        });\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n        if (this._scrollDispatcher) {\n            /** @type {?} */\n            const scrollableParents = this._scrollDispatcher\n                .getAncestorScrollContainers(this.element)\n                .map((/**\n             * @param {?} scrollable\n             * @return {?}\n             */\n            scrollable => scrollable.getElementRef().nativeElement));\n            this._dropListRef.withScrollableParents(scrollableParents);\n        }\n    }\n    /**\n     * Registers an items with the drop list.\n     * @param {?} item\n     * @return {?}\n     */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /**\n     * Removes an item from the drop list.\n     * @param {?} item\n     * @return {?}\n     */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /**\n     * Gets the registered items in the list, sorted by their position in the DOM.\n     * @return {?}\n     */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            /** @type {?} */\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Starts dragging an item.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @return {?}\n     */\n    start() {\n        this._dropListRef.start();\n    }\n    /**\n     * Drops an item into this container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     *\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._dropListRef.exit(item._dragRef);\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 10.0.0\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    }\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => ref.withDirection(value)));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const siblings = coerceArray(this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    list => list.id === drop)))) : drop;\n            }));\n            if (this._group) {\n                this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => drop && drop !== this)).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            list => list._dropListRef)))\n                .withOrientation(this.orientation);\n        }));\n    }\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n    /**\n     * Assigns the default input values based on a provided config object.\n     * @private\n     * @param {?} config\n     * @return {?}\n     */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /**\n     * Syncs up the registered drag items with underlying drop list ref.\n     * @private\n     * @return {?}\n     */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._dragRef)));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CdkDropListGroup, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CdkDropListGroup, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/**\n * Keeps track of the drop lists that are currently on the page.\n */\nCdkDropList._dropLists = [];\n/** @nocollapse */\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: ScrollDispatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc1.ScrollDispatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }] }); })();\nif (false) {\n    /**\n     * Keeps track of the drop lists that are currently on the page.\n     * @type {?}\n     * @private\n     */\n    CdkDropList._dropLists;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_disabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_sortingDisabled;\n    /** @type {?} */\n    CdkDropList.ngAcceptInputType_autoScrollDisabled;\n    /**\n     * Emits when the list has been destroyed.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._destroyed;\n    /**\n     * Reference to the underlying drop list instance.\n     * @type {?}\n     */\n    CdkDropList.prototype._dropListRef;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     * @type {?}\n     */\n    CdkDropList.prototype.connectedTo;\n    /**\n     * Arbitrary data to attach to this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.data;\n    /**\n     * Direction in which the list is oriented.\n     * @type {?}\n     */\n    CdkDropList.prototype.orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     * @type {?}\n     */\n    CdkDropList.prototype.id;\n    /**\n     * Locks the position of the draggable elements inside the container along the specified axis.\n     * @type {?}\n     */\n    CdkDropList.prototype.lockAxis;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._disabled;\n    /**\n     * Whether sorting within this drop list is disabled.\n     * @type {?}\n     */\n    CdkDropList.prototype.sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     * @type {?}\n     */\n    CdkDropList.prototype.enterPredicate;\n    /**\n     * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n     * @type {?}\n     */\n    CdkDropList.prototype.autoScrollDisabled;\n    /**\n     * Emits when the user drops an item inside the container.\n     * @type {?}\n     */\n    CdkDropList.prototype.dropped;\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     * @type {?}\n     */\n    CdkDropList.prototype.entered;\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     * @type {?}\n     */\n    CdkDropList.prototype.exited;\n    /**\n     * Emits as the user is swapping items while actively dragging.\n     * @type {?}\n     */\n    CdkDropList.prototype.sorted;\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._unsortedItems;\n    /**\n     * Element that the drop list is attached to.\n     * @type {?}\n     */\n    CdkDropList.prototype.element;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._group;\n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * \\@breaking-change 11.0.0\n     * @type {?}\n     * @private\n     */\n    CdkDropList.prototype._scrollDispatcher;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/drag-drop-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DragDropModule {\n}\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder], exports: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/cdk/drag-drop/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_CONFIG_FACTORY, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_b };\n\n//# sourceMappingURL=drag-drop.js.map","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { MatDragDropPage } from './mat-drag-drop.page';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MatDragDropPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes),\r\n    DragDropModule\r\n  ],\r\n  declarations: [MatDragDropPage]\r\n})\r\nexport class MatDragDropPageModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\n\r\n@Component({\r\n  selector: 'app-mat-drag-drop',\r\n  templateUrl: './mat-drag-drop.page.html',\r\n  styleUrls: ['./mat-drag-drop.page.scss'],\r\n})\r\nexport class MatDragDropPage implements OnInit {\r\n\r\n  todo = [\r\n    'Get to work',\r\n    'Pick up groceries',\r\n    'Go home',\r\n    'Fall asleep'\r\n  ];\r\n\r\n  done = [\r\n    'Get up',\r\n    'Brush teeth',\r\n    'Take a shower',\r\n    'Check e-mail',\r\n    'Walk dog'\r\n  ];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  drop(event: CdkDragDrop<string[]>) {\r\n    if (event.previousContainer === event.container) {\r\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n    } else {\r\n      transferArrayItem(event.previousContainer.data,\r\n        event.container.data,\r\n        event.previousIndex,\r\n        event.currentIndex);\r\n    }\r\n  }\r\n\r\n}\r\n","<ion-header>\r\n  <ion-toolbar>\r\n    <ion-buttons slot=\"start\">\r\n      <ion-back-button></ion-back-button>\r\n    </ion-buttons>\r\n    <ion-title>Drag Drop</ion-title>\r\n  </ion-toolbar>\r\n</ion-header>\r\n\r\n<ion-content class=\"ion-padding\">\r\n  <div class=\"example-container\">\r\n    <h2>To do</h2>\r\n\r\n    <div cdkDropList #todoList=\"cdkDropList\" [cdkDropListData]=\"todo\" [cdkDropListConnectedTo]=\"[doneList]\"\r\n      class=\"example-list\" (cdkDropListDropped)=\"drop($event)\">\r\n      <div class=\"example-box\" *ngFor=\"let item of todo\" cdkDrag>{{item}}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"example-container\">\r\n    <h2>Done</h2>\r\n\r\n    <div cdkDropList #doneList=\"cdkDropList\" [cdkDropListData]=\"done\" [cdkDropListConnectedTo]=\"[todoList]\"\r\n      class=\"example-list\" (cdkDropListDropped)=\"drop($event)\">\r\n      <div class=\"example-box\" *ngFor=\"let item of done\" cdkDrag>{{item}}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"example-box-basic\" cdkDrag>\r\n    Drag me around\r\n  </div>\r\n</ion-content>"]}